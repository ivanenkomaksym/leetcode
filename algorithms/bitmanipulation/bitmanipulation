using namespace std;

namespace Algorithms::BitManipulation
{
    /*
    231. Power of Two
    Easy

    Given an integer n, return true if it is a power of two. Otherwise, return false.

    An integer n is a power of two, if there exists an integer x such that n == 2x.

    Example 1:

    Input: n = 1
    Output: true
    Explanation: 20 = 1
    */
    bool isPowerOfTwo(int n) {  
        if (n <= 0)
            return false;
        
        return (n & (n - 1)) == 0;
    }

    /*
    191. Number of 1 Bits
    Easy

    Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

    Note:

        Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
        In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.

    

    Example 1:

    Input: n = 00000000000000000000000000001011
    Output: 3
    Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
    */
    int hammingWeight(uint32_t n) {
        int count = 0;
        
        while (n)
        {
            n = n & (n - 1);
            count++;
        }
        
        return count;
    }

    void run()
    {
        std::cout << "[Algorithms][BitManipulation]  Start" << std::endl;

        {
            auto result = isPowerOfTwo(16);

            assert(result == true);

            std::cout << "  [PASSED] 231. Power of Two" << std::endl;
        }
        
        {
            auto result = hammingWeight(11);

            assert(result == 3);

            std::cout << "  [PASSED] 191. Number of 1 Bits" << std::endl;
        }

        std::cout << "[Algorithms][BitManipulation]  End" << std::endl;
    }
}